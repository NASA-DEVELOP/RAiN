/*Code generated by Jared Tomlin, Didi El-Behaedi, Alison Thieme and Ryan Lingo
NASA DEVELOP Summer 2017 Niger Water Resources at Goddard Space Flight Center
Created in partnership with Mercy Corps in order to visualize datasets relevant to reslience in Niger.  
Date: August 11, 2017
\*/

//Let's get it started.. yeah
// Centers map on Niger
Map.setCenter(7, 17, 6);

//______________________________________________________________________________________________________________________________//
//Set variables calling on assets and collections
var Malaria = ee.ImageCollection("Oxford/MAP/Pf_Africa_5km_Annual"), //Malaria rates
    Commune = ee.FeatureCollection("users/developmercycorps/Commune"), //Commune borders
    GRACE = ee.Image("users/developmercycorps/GRACE_GW_20080101"), //GRACE data
    AgZones = ee.FeatureCollection("users/developmercycorps/AgricultureZones"), // Agricultural Zones
    borders = ee.FeatureCollection("USDOS/LSIB/2013"), // Niger country borders 
    TRMM = ee.ImageCollection('TRMM/3B42'), //TRMM Prescipitation Collection
    LSTcollection = ee.ImageCollection('MODIS/MOD11A2'), //MODIS Land Surface Temperature
    NDWIcollection = ee.ImageCollection('MODIS/MOD09GA_NDWI'), //Terra MODIS NDWI collection
    chirps = ee.ImageCollection("UCSB-CHG/CHIRPS/PENTAD"), //CHIRPS precipitation collection
    NDVIcollection = ee.ImageCollection('MODIS/MOD09GA_NDVI'), //Terra MODIS NDVI collection
    GSW = ee.Image('JRC/GSW1_0/GlobalSurfaceWater'), // Global Surface Water
    NG = borders.filter(ee.Filter.eq('cc', 'NG')), // Niger country borders
    conflict = ee.FeatureCollection("users/developmercycorps/ArmedConflict"), // ACLED Armed Conflict Locations and Events Data
    srtm = ee.Image('USGS/SRTMGL1_003'), // Digital Elevation Model
    GPM = ee.ImageCollection('NASA/GPM_L3/IMERG_V04'); //Globap Recipitation Measurement Collection
//______________________________________________________________________________________________________________________________//

// Commune - Fill, then outline the polygons into a blank image. 
var admOutline = ee.Image().toByte().paint(Commune, 1, 1); 

var stDate = '2016-08-01';
var dateRange = ee.Date(stDate).getRange('week');

// Background info/// Intro panel has detail on how to use. Must re-run in order to bring it back


var panel_intro = ui.Panel();
panel_intro.style().set({ width: '620px',height: '550px', position: 'top-center',color: '#4874ba', fontWeight: 'bold'});
Map.add(panel_intro);

// Add a button to hide the Panel.
panel_intro.add(ui.Button({label: 'Close', style: {color: 'black'},
  onClick: function() {
    panel_intro.style().set('shown', false);}
}));

// Add the title text
var title = ui.Panel([ui.Label({value: 'Welcome to the NASA DEVELOP Niger Water Resources team’s Rainfall Analysis '+
  'Integration (RAIn) tool', style: {fontSize: '25px', fontWeight: 'bold', textAlign: 'center',color:'black'}})]);
panel_intro.add(title);

var intro = ui.Panel([ui.Label({value: 'Before starting to explore the tool here are some tips and tricks for using '+
  'the tool. On the bottom left hand side of the screen there is a button labeled “EXPLORE”. Press this button to be '+
  'able to select different layers to visualize. In addition, you will be able to select the date of the imagery you '+
  'would like to display. On the bottom right hand side of the screen, there is a button labeled “LEGENDS”. In this '+
  'panel there will be legends for all the data layers. In order to close either panel (LEGENDS or EXPLORE), press '+ 
  'anywhere on the map. ',
    style: {color: 'black',fontWeight: 'normal',}})]);
panel_intro.add(intro);

var intro2 = ui.Panel([ui.Label({value: 'Clicking on the map will bring up time series charts of precipitation, '+
  'temperature, and vegetation greenness. Charts with coordinates can be found in the Console in the top right '+
  'of the screen. Please refresh to select new coordinates and time series charts.',
    style: {color: 'black',fontWeight: 'normal',}})]);
panel_intro.add(intro2);

var next = ui.Panel([ui.Label({value: 'Data Type, Source, Resolution (if applicable), Date, Static/Dynamic:',
    style: {color: 'black', fontWeight: 'bold'}})]);
panel_intro.add(next);

var age_data = ui.Panel([ui.Label({value: '- Age Structures, WorldPop, 100 km, 2014, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(age_data);

var ag_data = ui.Panel([ui.Label({value: '- Agriculture Zones, FEWS NET, 2011, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(ag_data);

var conflict_data = ui.Panel([ui.Label({value: '- Armed Conflict Events, ACLED, 1997 -July 2017, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(conflict_data);

var com_data = ui.Panel([ui.Label({value: '- Commune Boundaries, UC Berkeley GADM, 2015, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(com_data);

var nddi_data = ui.Panel([ui.Label({value: ' - Drought (NDDI), NASA Terra MODIS-Calculated, 500 m, 2000 - Present, Dynamic',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(nddi_data);

var elv_data = ui.Panel([ui.Label({value: '- Elevation, NASA SRTM, 30 m, 2000, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(elv_data);

var gwater_data = ui.Panel([ui.Label({value: '- Groundwater, NASA GRACE-Modeled, ~100 km, 2008, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(gwater_data);

var health_data = ui.Panel([ui.Label({value: '- Health Sites (Major), Global Health Sites Mapping Project, 2017, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(health_data);

var mal_data = ui.Panel([ui.Label({value: '- Malaria Infection Rates (Under 5), Oxford Malaria Atlas Project, 5 km, 2000 '+
  '- 2016, Static', style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(mal_data);

var chirps_data = ui.Panel([ui.Label({value: '- Rainfall, Climate Hazards Group CHIRPS, 5 km, 1981 - Present, Dynamic',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(chirps_data);

var gpm_data = ui.Panel([ui.Label({value: '- Rainfall, NASA GPM, 10 km,  2014 - Present, Dynamic',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(gpm_data);

var trmm_data = ui.Panel([ui.Label({value: '- Rainfall, NASA TRMM, 25 km, 1998 - 2015, Dynamic',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(trmm_data);

var ndwi_data = ui.Panel([ui.Label({value: ' - Surface Water, ESA Joint Research Center, 30 m, 1984 - 2015, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(ndwi_data);

var stemp_data = ui.Panel([ui.Label({value: '- Temperature (Land Surface), NASA Terra MODIS, 1 km, 2000 - Present, Dynamic',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(stemp_data);

var pop_data = ui.Panel([ui.Label({value: '- Total Population, WorldPop, 100 m x 100 m, 2010 - 2016, Static',
    style: {color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(pop_data);

var ndvi_data = ui.Panel([ui.Label({value: '- Vegetation Greenness (NDVI), NASA Terra MODIS,  500 m,  2000 - Present, Dynamic',
    style: {color: 'black', fontWeight:'normal'}})]);
panel_intro.add(ndvi_data);

var end = ui.Panel([ui.Label({value: 'Press on the “Close” button to start exploring the tool. Enjoy!',
    style: {color: 'black', fontWeight: 'bold'}})]);
panel_intro.add(end);

var extra = ui.Panel([ui.Label({value: 'This material is based upon work supported by NASA through '+ 
    'contract NNL16AA05C and cooperative agreement NNX14AB60A. Any mention of a commercial product,'+
    'service, or activity in this material does not constitute NASA endorsement. Any opinions, findings,'+ 
    'and conclusions or recommendations expressed in this material are those of the author(s) and '+ 
    'do not necessarily reflect the views of the National Aeronautics and Space Administration and partner organizations.'+
    ' It was created as part of the Summer 2017 NASA DEVELOP Goddard Space Flight Center Niger Water Resources project.',
    style: {fontSize: '10px', color: 'black', fontWeight: 'normal'}})]);
panel_intro.add(extra); 

//THIS IS THE DATE WRAPPER!!!
var getLayers = function(stDate){
  //this sets the date for the whole deal
  var dateRange = ee.Date(stDate).getRange('week');
  print(dateRange); // I would say keep this on so the user can see what is the latest imgs date. 
  Map.layers().reset();
//KEEP THIS ABOVE ANYTHING YOU DON'T WANT TO SHOW AT THE START


//===============LAYER FUNCTIONS ===============================================================================================//
// Surface water
GSW = GSW.select('change_norm').clip(NG),{};

// LST - MODIS image * 0.02 - 273.15 - Digital Number (DN) to Celsius
function convertToCelsius(image){
  var result = image.toFloat().multiply(0.02).subtract(273.15);
  result = result.copyProperties(image); 
  return result; 
}

// LST - load the MODIS raw data
var LSTrange = LSTcollection.select('LST_Day_1km').filterDate(dateRange).reduce(ee.Reducer.mean());
var cLST = ee.Image(convertToCelsius(LSTrange)).clip(NG);

// GRACE - clip
var cGRACE = GRACE.clip(NG);

// GPM
// Calculate rainfall in date and sum 
var GPMtrim = GPM.select('precipitationCal').filterDate(dateRange);
var GPMrangeSum = GPMtrim.reduce(ee.Reducer.sum()).divide(2).clip(NG);
//apply a mask to the image greater than 1
var GPMmaskSum = GPMrangeSum.updateMask(GPMrangeSum.gte(1));

// CHIRPS - Calculate rainfall in date range and clips
var rCHIRPS = chirps.select("precipitation").filterDate(dateRange);
var CHIRPSsum = rCHIRPS.reduce(ee.Reducer.mean()).clip(NG);
var cCHIRPS = CHIRPSsum.updateMask(CHIRPSsum.gte(1));

// Tropical Rainfall Measuring Mission (TRMM) - use dateRange to filter range and sum
var TRMMdate = TRMM.select('precipitation').filterDate(dateRange);
var TRMMrangeSum = TRMMdate.reduce(ee.Reducer.sum()).multiply(3).clip(NG);
var TRMMmaskSum = TRMMrangeSum.updateMask(TRMMrangeSum.gte(1));

// Normalized Difference Vegetation Index (NDVI)
var NDVIimages = NDVIcollection.filterDate(dateRange).reduce(ee.Reducer.mean());
var cNDVI = NDVIimages.clip(NG);

// Normalized Difference Water Index (NDWI)
var NDWIimages = NDWIcollection.filterDate(dateRange).reduce(ee.Reducer.mean());
var cNDWI = NDWIimages.clip(NG);

// Normalized Difference Drought Index (NDDI) - Do band math to find NDDI
var NDDI = cNDVI.subtract(cNDWI).divide(cNDVI.add(cNDWI));
var cNDDI = NDDI.clip(NG);

// Digital Elevation Model
var srtm_niger = ee.Image(srtm).clip(NG);

//_____________________________________________________________________________________________________________________________//
// All Socioeconomic Data added below here 

var Health = ee.FeatureCollection("users/socioeconomic/Health_Sites"),
    Five = ee.Image("users/socioeconomic/5yrs"),
    Ten = ee.Image("users/socioeconomic/10"),
    Fifteen = ee.Image("users/socioeconomic/15"),
    Infant = ee.Image("users/socioeconomic/Infa");

// Add age data for 0-5 years old 
var five_years = ee.Image(Five);
var five = five_years.clip(NG).updateMask(five_years.gt(1));

// Add age data for 10-15 years old 
var ten_years = ee.Image(Ten);
var ten = ten_years.clip(NG).updateMask(ten_years.gt(1));

// Add age data for 15-20 years 
var fifteen_years = ee.Image(Fifteen);
var fifteen = fifteen_years.clip(NG).updateMask(fifteen_years.gt(1));

// Add health sites (clinics and hospital)
var health_sites = ee.FeatureCollection(Health);

// Add population data (Estimated residential population per 100x100m grid square)
var worldpop = ee.ImageCollection("WorldPop/POP");
var nigerpop = worldpop.reduce(ee.Reducer.max()).clip(NG);
var population = nigerpop.updateMask(nigerpop.gt(1));

//Malaria
var malar = Malaria;
//sort and clip malaria
var Malarianewestimage = malar.sort('system:time_start', false).limit(1);
var cMalaria = Malarianewestimage.sum().clip(NG);
//select and reduce malaria data
var pMalaria = cMalaria.select('pfpr');
var Malarianice = pMalaria.reduce(ee.Reducer.max());




//================================LAND OF LEGENDS= ==[======> ===================================================================//

//Agricultural Zones legend
// Set position of panel
var aglegend = ui.Panel({style: {position: 'top-left',padding: '8px 3px'}});

// Creating the legend title
var aglegendTitle = ui.Label({value: 'Agriculture Zones', style:{fontWeight: 'bold',fontSize: '14px',margin: '0 0 4px 0',padding: '0'}});

// Adding the title to the panel
aglegend.add(aglegendTitle);

// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
      // Create the label 
      var colorBox = ui.Label({
        style: {backgroundColor: '' + color,padding: '8px',margin: '0 0 4px 0'}});
      // Create the label filled with the description text
      var description = ui.Label({value: name,style: {margin: '0 0 4px 6px'}});
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

// Ag zones Palette with the colors
var agpalette =['fefbd8','f4f39a','99f4c8','9abc5e','02fd02','01c501','008e00','0bbcb9','e5bc00','fd9500','3b3ed6','826310',
    'bc0000','0a3abc','bc995e'];

// Name of the Ag zones legend's components  
var agnames = ['Not Zoned (Desert)', 'North-east Oases: Dates, Salt and Trade', 'Air Massif Irrigated Gardening', 
    'Transhumant and Nomad Pastoralism', 'Agropastoral Belt', 'Rainfed Millet and Sorghum Belt', 
    'Cropping and Herding with High Work Outmigration', 'Southern Irrigated Cash Crops', 
    'Southwestern Cereals with Fan-Palm Products', 'Niger River Irrigated Rice', 
    'Dallols - Seasonal Water-Course Irrigated Crops', 'Southeastern Natron Salt and Small Basin Irrigated Dates', 
    'Komadougou Irrigated Peppers', 'Lake Chad Flood-Retreat cultivation with Fishing', 'Transumant and Nomad Pastoralism-Camels'];

// Add color and and names to the Ag legend
for (var i = 0; i < 15; i++) {
  aglegend.add(makeRow(agpalette[i], agnames[i]));
  }  

function categorize(fc, prop) {
  var uniqueValues = ee.List(fc.distinct(ee.SelectorSet(prop)).sort(prop).aggregate_array(prop));
  
  return fc.map(function(f) {
    return f.set(prop + '_category', uniqueValues.indexOf(f.get(prop)));
  });
}

var count = AgZones.aggregate_count_distinct('lznum').getInfo();

var agregionsimage = ee.Image().toByte();
var agpaintimage = agregionsimage.paint(categorize(AgZones, 'lznum'), 'lznum_category');
var agpalette2 = {palette:agpalette, min:0, max:14};
//End Ag Zone Legend_____________________________________________________________________________________________________________//

//_______________________________________________________________________________________________________________________________//
// Water (Precipitation, GRACE) Legend
var Waterviz = {min:0, max:600, palette: ['FFFFFF','fefbd8','04e9e7','019ff4','0300f4','02fd02']};

// Create legend title
var WaterlegendTitle = ui.Label({value: 'Rainfall / GW',style: {fontWeight: 'bold',fontSize: '14px',
    margin: '0 0 4px 10',padding: '0'}});
// create text on top of legend
var mmPent = ui.Label({value:'(mm)'});
var mmMax = ui.Label({value: '100 / 600'});

// create the legend image
var lon = ee.Image.pixelLonLat().select('latitude');
var Watergradient = lon.multiply((Waterviz.max-Waterviz.min)/100.0).add(Waterviz.min);
var WaterlegendImage = Watergradient.visualize(Waterviz);
var GThumb = ui.Thumbnail({image: WaterlegendImage,params: {bbox:'0,0,20,100', dimensions:'20x250'},
    style: {padding: '1px', position: 'bottom-center'}});
var mmMin = ui.Label({value: '0 / 0'});

// set position of panel
var Waterlegend = ui.Panel({
  widgets: [WaterlegendTitle, mmPent, mmMax, GThumb, mmMin],
  style: {position: 'bottom-left',padding: '8px 4px'}});

// End  Water (Precipitation, GRACE) Legend______________________________________________________________________________________//

//_______________________________________________________________________________________________________________________________//
// Surface Water Change Legend
var Surfviz = {min:-100, max:100, palette: ['FF0000' ,'FFFFFF' , '0000FF']};

// Create legend title
var SurflegendTitle = ui.Label({value: 'Surface Water',style: {fontWeight: 'bold',fontSize: '14px',
    margin: '0 0 4px 10',padding: '0'}});
// create text on top of legend
var perc = ui.Label({value:'% Change'});
var Surfmax = ui.Label({value: '100'});

// create the legend image
var Surfgradient = lon.multiply((Surfviz.max-Surfviz.min)/100.0).add(Surfviz.min);
var SurflegendImage = Surfgradient.visualize(Surfviz);
var Surfthumb = ui.Thumbnail({image: SurflegendImage,params: {bbox:'0,0,20,100', dimensions:'20x250'}, 
    style: {padding: '1px', position: 'bottom-center'}});
var Surfmin = ui.Label({value: '-100'});

// set position of panel
var Surflegend = ui.Panel({
  widgets: [SurflegendTitle, perc, Surfmax, Surfthumb, Surfmin],
  style: {position: 'bottom-left',padding: '8px 4px'}});

// End Surf Legend_____________________________________________________________________________________________________________//


//______________________________________________________________________________________________________________________________//
// LST Legend 

// LST create vizualization parameters
var LSTviz = {min:14, max:50, palette:['4e7bb5', '5a83b8', '6c8db8', '7d99ba', '8ca4ba', 'a4b7bd', 'bec9bd', 
    'd9e0bf', 'edf0c0','ffffbf','ffe1a6','fab682','f7a372','f7a774','f0855b','ed7a53','e86b48','de4733', 'd62f27']};

// create the legend image
var gradient = lon.multiply((LSTviz.max-LSTviz.min)/100.0).add(LSTviz.min);
var LSTlegendImage = gradient.visualize(LSTviz);

var Lcl1 = 14;
var Lcl2 = 16;
var Lcl3 = 18;
var Lcl4 = 20;
var Lcl5 = 22;
var Lcl6 = 24;
var Lcl7 = 26;
var Lcl8 = 28;
var Lcl9 = 30;
var Lcl10 = 32;
var Lcl11 = 34;
var Lcl12 = 36;
var Lcl13 = 38;
var Lcl14 = 40;
var Lcl15 = 42;
var Lcl16 = 44;
var Lcl17 = 46;
var Lcl18 = 48;
var Lcl19 = 50;

// Define an sld style color ramp to apply to the image.
var LSTsld_ramp =
  '<RasterSymbolizer>' +
    '<ColorMap type="ramp" extended="false" >' +
      '<ColorMapEntry color="#ffffbf" quantity="0" label="0"/>' +
      '<ColorMapEntry color="#4e7bb5" quantity="'+Lcl1+'" label="'+Lcl1+'" />' +
      '<ColorMapEntry color="#5a83b8" quantity="'+Lcl2+'" label="'+Lcl2+'" />' +
      '<ColorMapEntry color="#6c8db8" quantity="'+Lcl3+'" label="'+Lcl3+'" />' +
      '<ColorMapEntry color="#7d99ba" quantity="'+Lcl4+'" label="'+Lcl4+'" />' +
      '<ColorMapEntry color="#8ca4ba" quantity="'+Lcl5+'" label="'+Lcl5+'" />' +
      '<ColorMapEntry color="#a4b7bd" quantity="'+Lcl6+'" label="'+Lcl6+'" />' +
      '<ColorMapEntry color="#bec9bd" quantity="'+Lcl7+'" label="'+Lcl7+'" />' +
      '<ColorMapEntry color="#d9e0bf" quantity="'+Lcl8+'" label="'+Lcl8+'" />' +
      '<ColorMapEntry color="#edf0c0" quantity="'+Lcl9+'" label="'+Lcl9+'" />' +
      '<ColorMapEntry color="#ffffbf" quantity="'+Lcl10+'" label="'+Lcl10+'" />' +
      '<ColorMapEntry color="#ffe1a6" quantity="'+Lcl11+'" label="'+Lcl11+'" />' +
      '<ColorMapEntry color="#fab682" quantity="'+Lcl12+'" label="'+Lcl12+'" />' +
      '<ColorMapEntry color="#f7a372" quantity="'+Lcl13+'" label="'+Lcl13+'" />' +
      '<ColorMapEntry color="#f7a774" quantity="'+Lcl14+'" label="'+Lcl14+'" />' +
      '<ColorMapEntry color="#f0855b" quantity="'+Lcl15+'" label="'+Lcl15+'" />' +
      '<ColorMapEntry color="#ed7a53" quantity="'+Lcl16+'" label="'+Lcl16+'" />' +
      '<ColorMapEntry color="#e86b48" quantity="'+Lcl17+'" label="'+Lcl17+'" />' +
      '<ColorMapEntry color="#de4733" quantity="'+Lcl18+'" label="'+Lcl18+'" />' +
      '<ColorMapEntry color="#d62f27" quantity="'+Lcl19+'" label="'+Lcl19+'" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';

var LSTnice = cLST.sldStyle(LSTsld_ramp);

var LSTTitle = ui.Label({value: 'Temp',style: {fontWeight: 'bold',fontSize: '14px',margin: '0 0 4px 10',padding: '0'}});
var LSTLabel = ui.Label('(C)');
var LSTMax = ui.Label(LSTviz.max);
var LSTThumb = ui.Thumbnail({image: LSTlegendImage,params: {bbox:'0,0,20,100', dimensions:'20x250'},
    style: {padding: '1px', position: 'bottom-center'}});
var LSTMin = ui.Label(LSTviz.min);

// set position of panel
var LSTlegend = ui.Panel({
  widgets: [LSTTitle, LSTLabel, LSTMax, LSTThumb, LSTMin],
  style: {position: 'bottom-left',padding: '8px 4px'}});

//End LST Legend________________________________________________________________________________________________________________//

//______________________________________________________________________________________________________________________________//
//GPM Legend

// create vizualization parameters
var GPMviz = {min:0, max:100, palette:['FFFFFF','646464', '04e9e7', '019ff4', '0300f4', '02fd02']};
 
var Gcl1 = 0;
var Gcl2 = 20;
var Gcl3 = 40;
var Gcl4 = 60;
var Gcl5 = 80;
var Gcl6 = 100;

// Define an sld style color ramp to apply to the image.
var GPMsld_ramp =
  '<RasterSymbolizer>' +
    '<ColorMap type="ramp" extended="false" >' +
      '<ColorMapEntry color="#FFFFFF" quantity="0" label="0"/>' +
      '<ColorMapEntry color="#04e9e7" quantity="'+Gcl1+'" label="'+Gcl1+'" />' +
      '<ColorMapEntry color="#019ff4" quantity="'+Gcl2+'" label="'+Gcl2+'" />' +
      '<ColorMapEntry color="#0300f4" quantity="'+Gcl3+'" label="'+Gcl3+'" />' +
      '<ColorMapEntry color="#02fd02" quantity="'+Gcl4+'" label="'+Gcl4+'" />' +
      '<ColorMapEntry color="#01c501" quantity="'+Gcl5+'" label="'+Gcl5+'" />' +
      '<ColorMapEntry color="#008e00" quantity="'+Gcl6+'" label="'+Gcl6+'" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';

var GPMnice = GPMmaskSum.sldStyle(GPMsld_ramp).clip(NG);

//______________________________________________________________________________________________________________________________//
// CHIRPS uses same legend as GRACE

var CHIRPSnice = CHIRPSsum.sldStyle(GPMsld_ramp);

//______________________________________________________________________________________________________________________________//
//TRMM uses same legend as GRACE
var TRMMnice = TRMMmaskSum.sldStyle(GPMsld_ramp).clip(NG);

//______________________________________________________________________________________________________________________________//
//NDVI and NDDI use same NDVI legend

var NDVIviz = {min:0, max:0.35, palette:['d34b0c','d3620c','d37d0c','d3870c','d39b0c','d3b90c','d3c60c','cdd30c','bcd30c',
    '9ed30c','8ad30c','7ad30c','5cd30c','34d30c','0cd310','0cd331']};

var cl1 = 0;
var cl2 = 0.25;
var cl3 = 0.5;
var cl4 = 0.75;
var cl5 = 0.1;
var cl6 = 0.125;
var cl7 = 0.15;
var cl8 = 0.175;
var cl9 = 0.2;
var cl10 = 0.225;
var cl11 = 0.25;
var cl12 = 0.275;
var cl13 = 0.3;
var cl14 = 0.325;
var cl15 = 0.35;

var NDVIsld_ramp =
  '<RasterSymbolizer>' +
    '<ColorMap type="ramp" extended="false" >' +
      '<ColorMapEntry color="#d34b0c" quantity="0" label="0"/>' +
      '<ColorMapEntry color="#d3620c" quantity="'+cl1+'" label="'+cl1+'" />' +
      '<ColorMapEntry color="#d37d0c" quantity="'+cl2+'" label="'+cl2+'" />' +
      '<ColorMapEntry color="#d3870c" quantity="'+cl3+'" label="'+cl3+'" />' +
      '<ColorMapEntry color="#d39b0c" quantity="'+cl4+'" label="'+cl4+'" />' +
      '<ColorMapEntry color="#d3b90c" quantity="'+cl5+'" label="'+cl5+'" />' +
      '<ColorMapEntry color="#d3c60c" quantity="'+cl6+'" label="'+cl6+'" />' +
      '<ColorMapEntry color="#cdd30c" quantity="'+cl7+'" label="'+cl7+'" />' +
      '<ColorMapEntry color="#bcd30c" quantity="'+cl8+'" label="'+cl8+'" />' +
      '<ColorMapEntry color="#9ed30c" quantity="'+cl9+'" label="'+cl9+'" />' +
      '<ColorMapEntry color="#8ad30c" quantity="'+cl10+'" label="'+cl10+'" />' +
      '<ColorMapEntry color="#7ad30c" quantity="'+cl11+'" label="'+cl11+'" />' +
      '<ColorMapEntry color="#5cd30c" quantity="'+cl12+'" label="'+cl12+'" />' +
      '<ColorMapEntry color="#34d30c" quantity="'+cl13+'" label="'+cl13+'" />' +
      '<ColorMapEntry color="#0cd310" quantity="'+cl14+'" label="'+cl14+'" />' +
      '<ColorMapEntry color="#0cd331" quantity="'+cl15+'" label="'+cl15+'" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';

//visualize
var NDVInice = cNDVI.sldStyle(NDVIsld_ramp);

// Create legend title
var NDVITitle = ui.Label({value: 'Veg / Drought',style: {fontWeight: 'bold',fontSize: '14px',margin: '0 0 4px 10',padding: '0'}});
var NDVImax = ui.Label({value: NDVIviz.max +' / 17.5'});
var NDVILabel = ui.Label({value: 'Indices'});

// create the legend image
var NDVIlon = ee.Image.pixelLonLat().select('latitude');
var NDVIgradient = NDVIlon.multiply((NDVIviz.max-NDVIviz.min)/100.0).add(NDVIviz.min);
var NDVIlegendImage = NDVIgradient.visualize(NDVIviz);
//create thumbnail of the image
var NDVIThumb = ui.Thumbnail({image: NDVIlegendImage,params: {bbox:'0,0,20,100', dimensions:'20x250'},
    style: {padding: '1px', position: 'bottom-center'}});
var NDVImin = ui.Label({value: NDVIviz.min +' / -17.5'});

// set position of panel and add wigets
var NDVIlegend = ui.Panel({
  style: {position: 'bottom-left',padding: '8px 4px'},
  widgets: [NDVITitle,NDVILabel, NDVImax, NDVIThumb, NDVImin]
});

//______________________________________________________________________________________________________________________________//

var NDDIviz = {min:-17.5, max:17.5, palette:['d34b0c','d3620c','d37d0c','d3870c','d39b0c','d3b90c','d3c60c',
    'cdd30c','bcd30c','9ed30c','8ad30c','7ad30c','5cd30c','34d30c','0cd310','0cd331']};

var Dcl1 = -17.5;
var Dcl2 = -15;
var Dcl3 = -12.5;
var Dcl4 = -10;
var Dcl5 = -7.5;
var Dcl6 = -5;
var Dcl7 = -2.5;
var Dcl8 = 0;
var Dcl9 = 2.5;
var Dcl10 = 5;
var Dcl11 = 7.5;
var Dcl12 = 10;
var Dcl13 = 12.5;
var Dcl14 = 15;
var Dcl15 = 17.5;

var NDDIsld_ramp =
  '<RasterSymbolizer>' +
    '<ColorMap type="ramp" extended="false" >' +
      '<ColorMapEntry color="#d34b0c" quantity="0" label="0"/>' +
      '<ColorMapEntry color="#d3620c" quantity="'+Dcl1+'" label="'+Dcl1+'" />' +
      '<ColorMapEntry color="#d37d0c" quantity="'+Dcl2+'" label="'+Dcl2+'" />' +
      '<ColorMapEntry color="#d3870c" quantity="'+Dcl3+'" label="'+Dcl3+'" />' +
      '<ColorMapEntry color="#d39b0c" quantity="'+Dcl4+'" label="'+Dcl4+'" />' +
      '<ColorMapEntry color="#d3b90c" quantity="'+Dcl5+'" label="'+Dcl5+'" />' +
      '<ColorMapEntry color="#d3c60c" quantity="'+Dcl6+'" label="'+Dcl6+'" />' +
      '<ColorMapEntry color="#cdd30c" quantity="'+Dcl7+'" label="'+Dcl7+'" />' +
      '<ColorMapEntry color="#bcd30c" quantity="'+Dcl8+'" label="'+Dcl8+'" />' +
      '<ColorMapEntry color="#9ed30c" quantity="'+Dcl9+'" label="'+Dcl9+'" />' +
      '<ColorMapEntry color="#8ad30c" quantity="'+Dcl10+'" label="'+Dcl10+'" />' +
      '<ColorMapEntry color="#7ad30c" quantity="'+Dcl11+'" label="'+Dcl11+'" />' +
      '<ColorMapEntry color="#5cd30c" quantity="'+Dcl12+'" label="'+Dcl12+'" />' +
      '<ColorMapEntry color="#34d30c" quantity="'+Dcl13+'" label="'+Dcl13+'" />' +
      '<ColorMapEntry color="#0cd310" quantity="'+Dcl14+'" label="'+Dcl14+'" />' +
      '<ColorMapEntry color="#0cd331" quantity="'+Dcl15+'" label="'+Dcl15+'" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';

var NDDInice = cNDDI.sldStyle(NDDIsld_ramp);
//_____________________________________________________________________________________________________________________________//
//Population legend 
var popviz = {min:0, max:100, palette: ['ff0000', '000000']};

// Create legend title
var popTitle = ui.Label({value: 'Population',style: {fontWeight: 'bold',fontSize: '14px',margin: '0 0 4px 10',padding: '0'}});

// create the legend image
var poplon = ee.Image.pixelLonLat().select('latitude');
var popgradient = poplon.multiply((popviz.max-popviz.min)/100.0).add(popviz.min);
var poplegendImage = popgradient.visualize(popviz);

// create text on top of legend
var poppanel = ui.Label('per 100 m^2');

// create text on top of legend
var popmax = ui.Label(popviz.max);

// create thumbnail from the image
var popthumb = ui.Thumbnail({image: poplegendImage, params: {bbox:'0,0,20,100', dimensions:'20x250'},
    style: {padding: '1px', position: 'bottom-center'}});

// create text on bottom of legend
var popmin = ui.Label(popviz.min);
 
// set position of panel
var poplegend = ui.Panel({
  widgets: [popTitle, poppanel, popmax, popthumb, popmin],
  style: {position: 'bottom-left',padding: '8px 4px'}});


//____________________________________________________________________________________________________________________________//
//Malaria legend

// Create vizualization parameters
var Malariaviz = {min: 0, max: 0.66, palette:['0C337A','1A7F8F','08CF26','FCF003', 'C2523C']};

 
// Create legend title
var MalariaTitle = ui.Label({value: 'Malaria',style:{fontWeight: 'bold',fontSize: '14px',margin: '0 0 2px 8',padding: '0'}});

// Create text on top of legend
var Malariapanel = ui.Label('%');

// Create the legend image
var Malarialon = ee.Image.pixelLonLat().select('latitude');
var Malariagradient = Malarialon.multiply((Malariaviz.max-Malariaviz.min)/100.0).add(Malariaviz.min);
var MalarialegendImage = Malariagradient.visualize(Malariaviz);
 
// Create text on top of legend
var MalariaMax = ui.Label(Malariaviz.max);
 
// Create thumbnail from the image
var Malariathumb = ui.Thumbnail({image: MalarialegendImage,params: {bbox:'0,0,20,100', dimensions:'20x250'},
    style: {padding: '1px', position: 'bottom-center'}});
 
// Create text on bottom of legend
var MalariaMin = ui.Label(Malariaviz.min);

// set position of panel
var Malarialegend = ui.Panel({
  widgets: [MalariaTitle, Malariapanel, MalariaMax, Malariathumb, MalariaMin],
  style: {position: 'bottom-left',padding: '8px 4px'}});

//End Malaria Legend

//_____________________________________________________________________________________________________________________________//
// Elevation legend 

var SRTMviz = {min: 200, max: 2022, palette: ['AFF0E9', 'F8FCB3', '2FAB2B', '12823F', 'F2A202', '870801', 'FFFCFF']};

// create the legend image
var SRTMgradient = lon.multiply((SRTMviz.max-SRTMviz.min)/100.0).add(SRTMviz.min);
var SRTMlegendImage = SRTMgradient.visualize(SRTMviz);

// Create legend title
var SRTMTitle = ui.Label({value: 'Elevation',style: {fontWeight: 'bold',fontSize: '14px',margin: '0 0 2px 8',padding: '0'}});
var SRTMlabel = ui.Label({value: '(m)'});
var SRTMmax = ui.Label(SRTMviz.max);
// create thumbnail from the image
var SRTMthumb = ui.Thumbnail({image: SRTMlegendImage,params: {bbox:'0,0,20,100', dimensions:'20x250'},
    style: {padding: '1px', position: 'bottom-center'}});
var SRTMmin = ui.Label(SRTMviz.min);

 
// Set position of panel
var SRTMlegend = ui.Panel({
  widgets:[SRTMTitle,SRTMlabel, SRTMmax, SRTMthumb, SRTMmin],
  style: {position: 'bottom-left',padding: '8px 4px',}});

//____________________________________________________________________________________________________________________________//

//____________________________________________________________________________________________________________________________//
// Panel Layers and Date Selector
//BUILDING THE MAP!!!

//Layers list
var layers = [
    ui.Map.Layer(five, popviz, 'Age: 0-5 years', false),
  ui.Map.Layer(ten, popviz, 'Age: 10-15 years', false),
  ui.Map.Layer(fifteen, popviz, 'Age: 15-20 years', false),
  ui.Map.Layer(agpaintimage, agpalette2, 'Agriculture Zones', false),
  ui.Map.Layer(conflict, {palette: '000000'}, 'Armed Conflict Events', false),
  ui.Map.Layer(NDDInice, {}, 'Drought Index: Weekly Avg', false),
  ui.Map.Layer(srtm_niger, SRTMviz, 'Elevation', false),
  ui.Map.Layer(cGRACE, Waterviz, 'Groundwater Change (GW)', false),
  ui.Map.Layer(Health, {color: 'ff0000'}, 'Health Sites (Major)', false),
  ui.Map.Layer(Malarianice, Malariaviz, 'Malaria: % under 5 infected', false),
  ui.Map.Layer(population, popviz, 'Population Total', false),
  ui.Map.Layer(CHIRPSnice, {}, 'Rainfall (CHIRPS): Weekly Total', false),
  ui.Map.Layer(GPMnice, {}, 'Rainfall (GPM): Weekly Total', true),
  ui.Map.Layer(TRMMnice, {}, 'Rainfall (TRMM): Weekly Total', false),
  ui.Map.Layer(GSW, Surfviz, 'Surface Water: Change', false),
  ui.Map.Layer(LSTnice, {}, 'Temperature: Weekly Avg', false),
  ui.Map.Layer(NDVInice, {}, 'Vegetation Greenness: Weekly Avg', false),
  ui.Map.Layer(admOutline, {palette: '000000', max: 3, opacity: 1}, 'Commune Boundaries', true)
];


//We need this magic button to add the layers
Map.layers().reset(layers);

//_____________DiDi's Amazing Panel Wizardry____ =====+*** _________________________________//

//The panel to hold all the layers
var panel_layers = ui.Panel({
  style: {width: '250px', height: '500px',position: 'top-left', color: 'black', shown: false}
});

Map.add(panel_layers);

//Top of left Panel intro
var intro = ui.Panel([ui.Label({value: 'Explore Layers',style: {fontSize: '25px', fontWeight: 'bold'}}),]);

//Date panel... here lies the date selector funtionality. It calls functions at the top to reset and add updated layers to the map
var dateText = ui.Textbox({placeholder: 'yyyy-mm-dd', onChange: function(text){ },style: {width: '100px'}});

var dateButton = ui.Button({label: 'Go!', 
  onClick: function(){
  getLayers(dateText.getValue());
  }});

var datePanel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal'), widgets:[dateText, dateButton], 
    style: {width: '200px', height: '60px', position:'top-right'}});

panel_layers.add(intro);
panel_layers.add(datePanel);
//

var nav = layers.map(function(layer) {
  var name = layer.getName();
  return ui.Button(name, function() {
    Map.layers().forEach(function(mapLayer) {
      mapLayer.setShown(mapLayer.getName() == name);
    });
  });
});

panel_layers.add(ui.Panel(nav, ui.Panel.Layout.flow('vertical')));

// Create a button to unhide the panel.
var button2 = ui.Button({
  label: 'EXPLORE',
  style: {position: 'bottom-left', color: 'FF6700'},
  onClick: function() {
    // Hide the button.
    button2.style().set('shown', false);
    // Display the panel.
    panel_layers.style().set('shown', true);

    // Temporarily make a map click hide the panel
    // and show the button.
    var listenerId = Map.onClick(function() {
      panel_layers.style().set('shown', false);
      button2.style().set('shown', true);
      // Once the panel is hidden, the map should not try to close it by listening for clicks.
      Map.unlisten(listenerId);
    });
  }
});

// Add the button to the map and the panel to root.
Map.add(button2);

//_________________________________________________________________________________________________
// Panel Legends

var vertRamp = ui.Panel({
  widgets: [Waterlegend, LSTlegend, NDVIlegend, poplegend, Malarialegend, SRTMlegend, Surflegend],
  layout: ui.Panel.Layout.Flow('horizontal')
  });

var panel_legends = ui.Panel();
panel_legends.style().set({width: '590px',  height: '500px',  position: 'top-right',  color: 'black',  shown: false});

Map.add(panel_legends);

var Lintro = ui.Panel([
  ui.Label({
    value: 'Legends',
    style: {fontSize: '25px', fontWeight: 'bold'}
  }),
]);

// Add a button to close legend
  // Add a button to hide the Panel.
var Closebut = ui.Button({label: 'Close', style: {color: 'black'},
  onClick: function() {
    panel_legends.style().set('shown', false);
    button.style().set('shown', true);
    }
  });
//
// Add a button to hide the Panel.
var Welbut = ui.Button({label: 'Welcome Message', style: {color: 'black'},
  onClick: function() {
    panel_intro.style().set('shown', true);}
  });
//

var buts = ui.Panel({layout: ui.Panel.Layout.flow('horizontal'), widgets:[Lintro, Welbut, Closebut], 
    style: {width: '500px', height: '60px', position:'top-right'}});

//panel_legends.add(Lintro);
panel_legends.add(buts);
panel_legends.add(vertRamp);
panel_legends.add(aglegend);

// Create a button to unhide the panel.
var button = ui.Button({
  label: 'LEGENDS',
  style: {position: 'bottom-right', color: 'FF6700'},
  onClick: function() {
    // Hide the button.
    button.style().set('shown', false);
    // Display the panel.
    panel_legends.style().set('shown', true);

    // Temporarily make a map click hide the panel
    // and show the button.
    var listenerId = Map.onClick(function() {
      panel_legends.style().set('shown', false);
      button.style().set('shown', true);
      // Once the panel is hidden, the map should not try to close it by listening for clicks.
      Map.unlisten(listenerId);
    });
  }
});

// Add the button to the map and the panel to root.
Map.add(button);

//START WRAPPER 
  };

getLayers(stDate);
//END WRAPPER


// Here lies the magic that makes the time series charts work when the map is pressed. Let's try to make this a control on the map

var lon = ui.Label();
var lat = ui.Label();

Map.onClick(function(coords) {
  lon.setValue('lon: ' + coords.lon);
  lat.setValue('lat: ' + coords.lat);
print('Longitude:', lon);
print('Latitude:', lat);
// Add a red dot to the map //
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  var dot = ui.Map.Layer(point, {color: '000000'}, 'Pixel Selector');
Map.layers().set(1, dot);
Map.style().set('cursor', 'crosshair');

// Print a Precipitaiton chart //
  var chart1 = ui.Chart.image.series(chirps, point, ee.Reducer.mean(), 1000);
  chart1.setSeriesNames(['Chirps']);
  chart1.setOptions({
    title: 'Total Precipitation Over Time',
    vAxis: {title: 'Rainfall (mm)'},
    hAxis: {title: 'Date', format: 'MM-yy', gridlines: {count: 8}},
  });
  //SidePanel.widgets().set(1, chart1);
print(chart1);
// Print a LST chart //
function convertToCelsius(image){
  var result = image.toFloat().multiply(0.02).subtract(273.15);
  result = result.copyProperties(image, ['system:time_start']); 
  return result; 
}
//Load the MODIS raw data
   var LSTchart = ee.ImageCollection('MODIS/MOD11A2').map(convertToCelsius);
   var chart2 = ui.Chart.image.series(LSTchart.select('LST_Day_1km'), point, ee.Reducer.mean(), 1000);
  chart2.setSeriesNames(['Land Surface Temperature']);
  chart2.setOptions({
    title: 'Land Surface Temperature Over Time',
    colors: ['#8e2108'],
    vAxis: {title: 'Temperature (°C)'},
    hAxis: {title: 'Date', format: 'MM-yy', gridlines: {count: 7}},
  });
  //SidePanel.widgets().set(3, chart2);
print(chart2);
// Print an NDVI chart //
   var bands = ee.ImageCollection('MODIS/MCD43A4_NDVI');
//Select date for bands
   var NDVIcollection = bands.select('NDVI');
   var chart3 = ui.Chart.image.series(NDVIcollection, point, ee.Reducer.mean(), 1000);
  chart3.setSeriesNames(['Normalized Difference Vegetation Index ']);
  chart3.setOptions({
    title: 'NDVI over time',
    colors: ['#137524'],
    vAxis: {title: 'Vegetation Greenness'},
    hAxis: {title: 'Date', format: 'MM-yy', gridlines: {count: 7}},
  });
  //SidePanel.widgets().set(2, chart3);
print(chart3);
});

//THIS IS THE END!!!!!.... of the code. :D
